App Documentation:
Please update this as you commit changes.

File Structure:
	ICalendar.java holds the JavaFX user interface.
	EventCreator.java holds the makeEvent method, which takes in user-given variables. It then converts the variables to the proper format and writes the .ics file.
	Because the .ics file is all text, every variable is a String type, so we can easily combine things, and write them to then file.
		Variables defined in the instructions for the first deliverable are:
			1. eventSummary: which is the "title" of the event. ex: "Study for exam"
			2. timeStart: which is the start time of the event. ex: "1pm", maybe change this to a dropdown menu of times?
			3. timeEnd: which is the end time of the event. ex: "2pm", maybe change this to a dropdown menu of times?
			4. dateStart: the start date of the event, must be given in D/M/Y format. ex: "12 August 2015"
			5. location: the location of the event. ex: "Hamilton Library"
		Optional fields:
			Optional fields are String variables initialized to "".
			They must be handled with an If-Else statement in the makeEvent method. If it remains empty, that line should not be written to the .ics file.
			Optional variables are:
				6. geoPosition: given as a string of a Latitude and Longitude pair separated by a ";". 
				7. classification: a string classification.
				


What we have so far (07/07/15 10am):
	On start, our app opens a window prompting the user to fill out a form of required and optional textfields.
	When they are done, they press the save button.
	Clicking the save button starts the following sequence:
		1.All textfields run through ...getText()
		1b. StartTimeConverter, EndTimeConverter, and timezoneConverter are called in the ICalendar.java class.
		2. The makeEvent method in the EventCreator class is called, passing all the parameters gathered in step 1.
		3. The makeEvent method writes the file line by line, placing in the appropriate parameter where told to.
		4. makeEvent writes to the console when finished, and then file is saved.

TO-DO's:
	Systematic testing:
	1.write jUnit Tests
	
	SORT arbitrary # of events on "start time": {
	2.Make method to read in files of the same date
	3.Make method to grab DTSTART from each file
	4.Make method to delim DTSTART to get "start time"
	5.Make method to sort event dates on "start time" }
	
	
	Compute great circle distance:
	6.
	7.
	8.
	9.
	10.




~~~OTHER~~~
TIME FORMAT:
	Convert timeStart and dateStart into the .ics file format for the DTSTART line. (Similar must be done for DTEND line).
		.ics file format lumps the date and time together in one chain like:
			DTSTART; TZID=Pacific/Honolulu:20150705T091500
			
			^the format is "TIMEZONE: YEAR + MONTH + DAY + T + STARTTIME"
			follow similar format for DTEND.

TIMEZONE'S:
UTC: Africa/Morocco
EDT: America/New_York
CDT: America/Kansas_City
MDT: America/Denver
PDT: America/Los_Angeles
AKDT: America/Fairbanks
HST: Pacific/Honolulu
	
			
	
	
	
